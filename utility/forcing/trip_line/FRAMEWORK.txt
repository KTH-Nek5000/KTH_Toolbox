#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup trip_line  Line tripping module
@ingroup forcing

@brief Random volume force along the line

@details Set of routines to generate random volume force along the line defined by its starting and ending points.
This tool can be used e.g. to mimic sand paper effect by setting a line running in a spanwise direction of the domain.
Its aim is to introduce to the flow low amplitude random noise, that can be used to study e.g. a stability of a 
boundary layer. 

Each line can be declared as finate in size (streatching from the starting point to the ending on) or the infinite 
one. The focing is applied only in the eliptical region along the line defined by the smoothing lengths SMTHX and 
SMTHY and rotated counterclockwise by ROTA angle. This angel is used as well to rotate the force, so it can be e.g. 
normal to the wall. In case of a finite length line the smoothing in the third direction SMTHZ is taken into account 
at the line ending points as well. The forcing is always normal to the line and its direction is not changin along 
the line. It is just forcing magnitude that fluctuates. As a line direction is specified by its starting and ending 
points, to determine the forcing direction we define line's local coordinate system build of three versors VX, VY 
and VZ, where VZ is by definition parallel to the line. To determine versors normal to the line we use va ector cross 
product:
\f[ VY = VZ \times VL,\f]
where VL is a vrsor parallel to the physical y axis for VZ parallel to the physical x axis, and it is parallel to 
the physical x axis otherwise. Finally 
\f[ VX = VZ \times VY.\f]
The last operation is rotetion of the local vresors VX and VY by ROTA angle along VZ versor. The forcing is always 
directed along VY versor.

The smoothing function is defined in the following way:
\f{eqnarray*}{
    f_{smth}(r) = \left\{ \begin{array}{ll}
     exp\left(-r^2\right)*\left(1-r^2\right)^2  &\mbox{ if $r \leq 1.0$} \\
     0 &\mbox{ if $r >  1.0$}
     \end{array} \right.
\f}
where
\f[ r^2 = \left( {x_{loc} \over SMTHX} \right)^2 + \left( {y_{loc} \over SMTHY} \right)^2, \f]
for an infinite line and the interior of the finite line, and
\f[ r^2 = \left( {x_{loc} \over SMTHX} \right)^2 + \left( {y_{loc} \over SMTHY} \right)^2 + \left( {z_{lrel} \over SMTHZ} \right)^2 \f]
for the finite line endings. \f$x_{loc}\f$ and \f$y_{loc}\f$ are the point coordinates in the line's locall coordinate 
system, and \f$z_{lrel}\f$ is a third local coordinate relative to the corresponding line ending.

However, the function with limitted support can be easily replaced with simple Gauss profile
(see commented lines in @ref trip_1dprj and notice factor 4.0 in the Gauss function necessary to 
make smoothing lenghts consistent with the original function).
The tripping has both steady and unsteeady parts with amplitudes TIAMP and TDAMP respectively,
and the forcing is given by:
 \f{eqnarray*}{ 
f_x &=& f_{smth}(r)*f(z,t)*VY_x, \\
f_y &=& f_{smth}(r)*f(z,t)*VY_y, \\
f_z &=& f_{smth}(r)*f(z,t)*VY_z, 
\f}
where
\f[ f(z,t) = TIAMP*g(z) + TDAMP*\left[ \left(1-b(t)\right)h^i(z) +  b(t)h^{i+1}(z) \right], \f]
and 
\f{eqnarray*}{
i &=& int(t/TDT), \\
b(t) &=& 3p^2-2p^3, \\
p &=& t/TDT -i.
\f}
Here \f$g(z)\f$ and \f$h(z)\f$ are Fourier series of unit amplitude with NMODE random coefficients.
The trip forcing generates noise with a uniform distribution over all frequencies lower than the 
cutoff frequency corresponding to \f$2\pi/TDT\f$, where TDT is a time interval between change of 
the time dependent part of the trip.

This forcing has one continuous time derivative and is independent of the time discretisation.
It should be independent as well on the simulation details (e.g. number of mpi ranks or 
restart flag). It is based on a similar implementation in the SIMSON code @cite Chevalier2007, 
and is described in detail in @cite Schlatter2012.

This tool can simulate number of lines with different set of parameters for each line. The maximal
number of lines is given by trip_nline_max in TRIPD include file. In the same way maximal number of 
Fouries modes per line is given by trip_nmode_max parameter. User has to adjust values of these variables
before compilation of the code.

@mod_interface
@interface_list Interface provided:
-# @ref trip_register
-# @ref trip_init
-# @ref trip_is_initialised
-# @ref trip_update
-# @ref trip_forcing
-# @ref trip_reset

@par
@interface_reqr Interface required:
-# multiple interfaces from [runtime parameters] (@ref runparam) and [monitor] (@ref monitor) modules
-# @ref io_file_freeid from [Input/output] (@ref io) module (debugging only)
-# @ref math_rot3da from @ref math module


@mod_interface_example
@code{.f}
!======================================================================
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! FF[XYZ]
      include 'PARALLEL'        ! GLLEL
      include 'SOLN'            ! V[XYZ]

      integer ix,iy,iz,ieg

      FFX = 0.0
      FFY = 0.0
      FFZ = 0.0

!     add tripping
      call trip_forcing(FFX,FFY,FFZ,ix,iy,iz,ieg)

      return
      end
!======================================================================
      subroutine userchk
      implicit none
      include 'SIZE'            !
      include 'TSTEP'           ! ISTEP, lastep, time
      include 'INPUT'           ! IF3D, PARAM
      
!     start framework
      if (ISTEP.eq.0) call frame_start

!     monitor simulation
      call frame_monitor

!     for tripping
      call trip_update

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
     
      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call trip_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
      include 'SOLN'
!-----------------------------------------------------------------------
!     initialise modules
      call trip_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     finalise modules
      
      return
      end subroutine
!======================================================================

@endcode

@mod_param
@param_list Parameters provided by trip_line module (include file - \a TRIPD):
|Varaible | Type | Runtime parameter | Default value | Description |
|---------|------|-------------------|---------------|-------------|
|trip_nline      | integer | _tripping:nline | 0  | Number of tripping lines |
|trip_tiamp      | real | _tripping:tiamp   | 0.0 | Time independent amplitude |
|trip_tdamp      | real | _tripping:tdamp   | 0.0 | Time dependent amplitude   |
|trip_spos(1,il) | real | _tripping:sposx'il' | 0.0 | Starting point X of 'il' line |
|trip_spos(2,il) | real | _tripping:sposy'il' | 0.0 | Starting point Y of 'il' line |
|trip_spos(3,il) | real | _tripping:sposz'il' | 0.0 | Starting point Z of 'il' line |
|trip_epos(1,il) | real | _tripping:eposx'il' | 0.0 | Ending point X of 'il' line |
|trip_epos(2,il) | real | _tripping:eposy'il' | 0.0 | Ending point Y of 'il' line |
|trip_epos(3,il) | real | _tripping:eposz'il' | 0.0 | Ending point Z of 'il' line |
|trip_smth(1,il) | real | _tripping:smthx'il' | 0.0 | Smoothing length X of 'il' line |
|trip_smth(2,il) | real | _tripping:smthy'il' | 0.0 | Smoothing length Y of 'il' line |
|trip_smth(3,il) | real | _tripping:smthz'il' | 0.0 | Smoothing length Z of 'il' line |
|trip_lext(il)   | logical | _tripping:lext'il' | .F. | Line extension |
|trip_rota(il)   | real | _tripping:rota'il'  | 0.0 | Rotation angle of 'il' line |
|trip_nmode(il)  | integer | _tripping:nmode'il' | 0  | Number of Fourier modes of 'il' line |
|trip_tdt(il)   | real | _tripping:tdt'il'  | 0.0 | Time step for tripping of 'il' line |

@mod_param_example
@include Toolbox/utility/forcing/trip_line/example.par

*/
