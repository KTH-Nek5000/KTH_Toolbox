#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup sponge_box  Sponge_box module
@ingroup forcing

@brief Sponge/fringe for simple box mesh

@details
Set of routines to apply sponge (fringe in periodic domains) for simple box mesh. It calculates a volume forcing
\f[ \vec F = \lambda(x) \left( \vec U - \vec u\right),\f]
with \f$ \lambda(x), \vec U\f$ and \f$ \vec u\f$ beeing non-negative sponge/fringe function, constant in time
reference velocity field and current velocity field respectively. 1-dimensional sponge funcion is definde as
\f[ \lambda(x) = \lambda_{max} *\left[S\left((x_{min} + \Delta_{wl} - x)/\Delta_{dl} \right) + 
S\left((x - x_{max} + \Delta_{wr})/\Delta_{dr} \right) \right],\f]
where:
- \f$ \lambda_{max} \f$ - sponge strenght,
- \f$ S(x) \f$ - step function @ref math_stepf,
- \f$ x_{min}, x_{max} \f$ - left and right box boundaries,
- \f$ \Delta_{wl}, \Delta_{wr} \f$ - left and right sponge section width,
- \f$ \Delta_{dl}, \Delta_{dr} \f$ - left and right sponge section drop/rise width.

In our implementation each dimension is treated separately and the final 3-dimensional function takes a 
maximum value of its 1-dimensional components. \f$ \Delta_{wl}\f$ and \f$ \Delta_{wr} \f$ can be set to zero.

@mod_interface
@interface_list Interface provided:
-# @ref spng_register
-# @ref spng_init
-# @ref spng_forcing
-# @ref spng_is_initialised

@mod_interface_example
@code{.f}
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! FF[XYZ]
      include 'PARALLEL'        ! GLLEL
      include 'SOLN'            ! V[XYZ]

      FFX = 0.0
      FFY = 0.0
      FFZ = 0.0

!     add sponge
      call spng_forcing(FFX,FFY,FFZ,ix,iy,iz,ieg)

      return
      end
!-----------------------------------------------------------------------
     subroutine userchk
      implicit none
      include 'SIZE'
      include 'TSTEP'

!     start framework
      if (ISTEP.eq.0) call frame_start

!     monitor simulation
      call frame_monitor

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
      
      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call spng_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'

      ! local variables
      integer nn
      real vtmp(lx1*ly1*lz1*lelt,ldim)
      common /CTMP1/ vtmp
!-----------------------------------------------------------------------
!     initialise modules
      nn = lx1*ly1*lz1*lelt*ldim
      call rzero(vtmp,nn)
      call spng_init(vtmp(1,1),vtmp(1,2),vtmp(1,ndim))

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------

      return
      end subroutine
!======================================================================
@endcode

@mod_param
@param_list Parameters provided by sponge_box module (include file - \a SPONGRBD):
|Varaible | Type | Runtime parameter | Default value | Description |
|---------|------|-------------------|---------------|-------------|
|spng_str | real | _spongebx:strenght | 0.0 | sponge strength |
|spng_wl(1) | real | _spongebx:widthlx | 0.0 | sponge left section width; dimension X |
|spng_wl(2) | real | _spongebx:widthly | 0.0 | sponge left section width; dimension Y |
|spng_wl(3) | real | _spongebx:widthlz | 0.0 | sponge left section width; dimension Z |
|spng_wr(1) | real | _spongebx:widthrx | 0.0 | sponge right section width; dimension X |
|spng_wr(2) | real | _spongebx:widthry | 0.0 | sponge right section width; dimension Y |
|spng_wr(3) | real | _spongebx:widthrz | 0.0 | sponge right section width; dimension Z |
|spng_dl(1) | real | _spongebx:droplx | 0.0 | sponge left drop/rise section width; dimension X |
|spng_dl(2) | real | _spongebx:droply | 0.0 | sponge left drop/rise section width; dimension Y |
|spng_dl(3) | real | _spongebx:droplz | 0.0 | sponge left drop/rise section width; dimension Z |
|spng_dr(1) | real | _spongebx:droprx | 0.0 | sponge right drop/rise section width; dimension X |
|spng_dr(2) | real | _spongebx:dropry | 0.0 | sponge right drop/rise section width; dimension Y |
|spng_dr(3) | real | _spongebx:droprz | 0.0 | sponge right drop/rise section width; dimension Z |

@mod_param_example
@code{.txt}
[_SPONGEBX]
strength = 1.0
widthlx = 4.0
widthly = 0.0
widthlz = 0.0
widthrx = 4.0
widthry = 0.0
widthrz = 0.0
droplx = 2.0
droply = 0.0
droplz = 0.0
droprx = 2.0
dropry = 0.0
droprz = 0.0
@endcode


*/
#List of existing submodules
SUBMODULES 

#List of conflicting submodules
EXCLUSIVE

#Default submodules
DEFAULT

#List of conflicting modules
CONFLICTS

#List of required modules
REQUIRED utility/math \
         driver/frame

#List of object files
OBJECT spongebx.o

#List of include files
INCLUDE SPONGEBXD
 