#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup pstat3d  Post-processing of 3D statistics
@ingroup postpr

@brief Set of post-processing routines for 3D statistics.

@details 
This tools allows post-processing of 3D statistics files generated by
the stats tool.
In particular, it allows to do two things:
- average across previously generated 3D statistics files, i.e. with
 prefixes `s01` to `s11` to generate a single set of corresponding files.
- Interpolate this averaged data at arbitrary points and store the results
in a single file that can be easily read using e.g. Python.

In addition, when doing the above the tool will compute a number of extra
fields, including the components of the turbulent kinetic energy budget.
Details below.

The following workflow is suggested to use the module:
- Create a new case directory with the same geometry as your main case.
- Set up the `.usr` and `.par` and `makefile_usr.inc` files according to
 the examples herein, create the `PSTAD` file by copying the template in this
 folder. Compile the case.
- Create a folder called DATA in the case directory.
- Copy the previously generated files with prefex `s01`-`s11` to this folder.
If you are not interested in point interpolation the next 2 steps can be skipped.
- Create the file `int_pos` using the Python API in `writer_int_pos.py`.
This file will contain the locations of the points, to which the average data will
be interpolated.
- Move the `int_pos` file to the DATA folder.
- Run the case. If you are not using point interpolation, the case will
eventually "crash" because no `int_pos` file will be found. That is OK.

As a result, the tool will produce a set of files with prefix `a01` to
`a22` containing data averaged across `STS_NFILE` of the provided
`s01`-`s11` files, exlcluding those collected at times less than
`STS_STIME`.
TODO: add txt file with list of fields and distribution across a* files.

The interpolated point data is saved to a file called `int_fld`.
It can be read using the functions in `reader_int_fld.py` Python file.

@mod_interface
@interface_list
-# @ref pstat_register
-# @ref pstat_init
-# @ref pstat_main

@mod_interface_example
@code{.f}
!======================================================================
      subroutine userchk
      include 'TSTEP'
      
      if (ISTEP.eq.0) then
!     start framework
         call frame_start
      endif

!     monitor simulation
      call frame_monitor

!     collect statistics
      call pstat_main()

!     Force running for only one iteration
      LASTEP=1

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
 
      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! register modules
      call io_register
      call pstat_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! initialise modules
      call pstat_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      return
      end subroutine
!======================================================================
@endcode

@mod_param
@param_list Parameters provided by sfd module (include file - \a STATD):
|Varaible   | Type    |Runtime parameter     | Description|
|-----------|---------|----------------------|------------|
| STS_NFILE | integer | _pstat:STS_NFILE     | Number of collected s01-s11 files |
| STS_STIME | float   | _pstat:STS_STIME     | Statistics starting time |
| STS_NSTEP | integer | _pstat:STS_NSTEP     | Number of steps between averaging in collected s01-s11 files |


@mod_param_example
@code{.txt}
[_PSTAT3D]                # Runtime paramere section for pstat module
STS_NFILE            = 2                      # Number of collected s01-s11 files
STS_STIME            = 0.69968783E+02         # Statistics starting time
STS_NSTEP            = 10                     # Number of steps between averaging in collected s01-s11 files 
@endcode

*/
#List of existing submodules
SUBMODULES

#List of conflicting submodules
EXCLUSIVE

#Default submodules
DEFAULT

#List of conflicting modules
CONFLICTS

#List of required modules
REQUIRED

#List of object files
OBJECT

#List of include files
INCLUDE
