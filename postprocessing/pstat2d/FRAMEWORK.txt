#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup pstat2d  Post-processing for 2D statistics
@ingroup postpr

@brief Set of post-processing routines for 2D statistics.

@details 

This tools allows post-processing of 2D statistics files generated by
the stats tool.
In particular, it allows to do two things:
- average across previously generated 2D statistics files, i.e. with
 prefix `sts` to generate a single set of corresponding files.
- Interpolate this averaged data at arbitrary points and store the results
in a single file that can be easily read using e.g. Python.

In addition, when doing the above the tool will compute a number of extra
fields. Details below.

The following workflow is suggested to use the module:
- Create a new case directory, and generate the geometry that corresponds to the same
2D slice that is obtained when squashing the 3D geometry of your case across the
statistically-homogenous direction.
- Set up the `.usr` and `.par` and `makefile_usr.inc` files according to
 the examples herein, create the `PSTAD` file by copying the template in this
 folder. Compile the case.
- Create a folder called DATA in the case directory.
- Copy the previously generated files with prefex `sts` and `c2D` to this folder.
If you are not interested in point interpolation the next 2 steps can be skipped.
- Create the file `int_pos` using the Python API in `writer_int_pos.py`.
This file will contain the locations of the points, to which the average data will
be interpolated.
- Move the `int_pos` file to the DATA folder.
- Run the case. If you are not using point interpolation, the case will
eventually "crash" because no `int_pos` file will be found. That is OK.

As a result, the tool will produce two files with prefix `s1`and 
`s2` containing data averaged across `STS_NFILE` of the provided
`sts` files, exlcluding those collected at times less than
`STS_STIME`.
The full list of fields computed, and their order is provided in the
field_list.txt file in this directory.
The `s1` file contain the same fields as in the `sts` files generated by
 the stats tool, but in slightly different order.
The `s2` file will contain the extra derivative fields.
The interpolated point data is saved to a file called `int_fld`.
It can be read using the functions in `reader_int_fld.py` Python file.

@mod_interface
@interface_list
-# @ref pstat_register
-# @ref pstat_init
-# @ref pstat_main

@mod_interface_example
@code{.f}
!======================================================================
      subroutine userchk
      include 'TSTEP'
      
      if (ISTEP.eq.0) then
!     start framework
         call frame_start
      endif

!     monitor simulation
      call frame_monitor

!     collect statistics
      call pstat_main()

!     Force running for only one iteration
      LASTEP=1

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
 
      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! register modules
      call io_register
      call pstat_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! initialise modules
      call pstat_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      return
      end subroutine

@mod_param
@param_list Parameters provided by sfd module (include file - \a STATD):
|Varaible | Type |Runtime parameter | Description|
|---------|------|------------------|------------|
| CRD_FNUM | integer | _pstat:CRD_FNUM | CRD file number |
| AMR_REF  | integer | _pstat:IOStep   | Nr. of inital refinements (AMR only) |
| STS_NFILE | integer | _pstat:STS_NFILE  | Number of collected sts files |
| STS_STIME | float   | _pstat:STS_STIME  | Statistics starting time |
| STS_NSTEP | integer | _pstat:STS_NSTEP  | Number of steps between averaging in collected sts files |


@mod_param_example
@code{.txt}
[_PSTAT2D]                # Runtime paramere section for pstat module
CRD_FNUM             = 1                      # CRD file number
AMR_NREF             = 5                      # Nr. of initial refinemnt (AMR only)
STS_NFILE            = 1                      # Number of stat files
STS_STIME            = 0.00000000E+00         # Statistics starting time
STS_NSTEP            = 10                     # Number of steps between averaging (in sts files)
@endcode

*/
#List of existing submodules
SUBMODULES

#List of conflicting submodules
EXCLUSIVE

#Default submodules
DEFAULT

#List of conflicting modules
CONFLICTS

#List of required modules
REQUIRED

#List of object files
OBJECT

#List of include files
INCLUDE
