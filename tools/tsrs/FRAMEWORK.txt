#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup tsrs   Time history for set of points
@ingroup tools

@brief Set of rutines to collect a time history for set of points

@details 
This set of routines performs spectral interpolation of the velocity, pressure and vorticity fileds on a set of points and 
writes the in a binary file. 
@todo This have to be completed

@todo Rewrite pts_redistribute.f

@mod_interface
@interface_list Interface provided:
-# @ref tsrs_register
-# @ref tsrs_init
-# @ref tsrs_end
-# @ref tsrs_is_initialised
-# @ref tsrs_main

@par
@interface_reqr Interface required:
-# multiple interfaces from @ref rprm and @ref mntr modules
-# @ref io_file_freeid from @ref io module (debugging only)
-# @ref comm_ivglrsum and @ref comm_ibcastn from @ref comm module
-# \a user_stat_trnsv; user defined

@note \a user_stat_trnsv is a user provided interface for both tsrs and @ref stat modules.

@mod_interface_example
@code{.f}
!======================================================================
      subroutine userchk
      include 'TSTEP'
      
      logical ifsave
      
      if (ISTEP.eq.0) then
!     start framework
         call frame_start
      endif

!     monitor simulation
      call frame_monitor

!     collect time series
      ifsave = .false. ! no I/O correlation with other packages
      call tsrs_main(ifsave)

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
 
      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! register modules
      call tsrs_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! initialise modules
      call tsrs_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! finlise modules
      call tsrs_end
      
      return
      end subroutine
!======================================================================
@endcode
@include Toolbox/tools/tsrs/example.usr

@mod_param
@param_list Parameters provided by tsrs module (include file - \a TSRSD):
|Varaible | Type |Runtime parameter | Description|
|---------|------|------------------|------------|
| tsrs_smpstep | integer | _tsrs:SmpStep | frequency of sampling |
| tsrs_skstep | integer | _tsrs:SkStep | skipped initial steps |

@mod_param_example
@include Toolbox/tools/tsrs/example.par

*/
