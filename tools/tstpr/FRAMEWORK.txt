#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup tstpr Time stepper routines
@ingroup tools

@brief Time stepper for Nek5000

@details
This module implements time stepper method for linear solver in Nek5000 using the userchk interface. 
It allows to perform a number of constant length cycles providing the result vector to 
the submodule. There are two possible submodules: power iteration and spectra calculation
using the Arnoldi algorithm implemented in \a PARPACK. The initial condition for the next stepping
cycle is provided by the submodule. Three stepper modes are supported: direct, adjoint, direct+adjoint.

There are two parameters in TSTRP include file that heve to be adjusted for the given setup. These parameters
are \a tstpr_pr and \a tstpr_ht defining whetere pressure ro themperature are included in the simlulation vector.
These parameters can be equal 0 or 1. The pressure is never included in the vector inner product, however for 
\a tstpr_pr=0 it is reset to zero at the beginning of each cycle. On the other hand \a tstpr_ht should be set to 1
for all simulations including temperature.

@todo Finish temperature

@mod_interface
@interface_list Interface provided:
-# @ref tstpr_register
-# @ref tstpr_init
-# @ref tstpr_is_initialised
-# @ref tstpr_main

@par
@interface_reqr Interface required:
-# multiple interfaces from @ref rprm and @ref mntr modules
-# @ref cnht_register, @ref cnht_init, @ref cnht_is_initialised, @ref cnht_glsc2_wt, @ref cnht_cpfld_set and @ref cnht_opcmult from @ref cnht module (automatically registered)
-# \a stepper_register; provided by a submodule
-# \a stepper_init; provided by a submodule
-# \a stepper_vsolve; provided by a submodule

@mod_interface_example
@code{.f}
!======================================================================
      subroutine userchk
      include 'TSTEP'

      if (ISTEP.eq.0) then
!     start framework
         call frame_start
      endif

!     monitor simulation
      call frame_monitor

!     call time stepper
      call tstpr_main()

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
      
      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call chkpt_register
      call tstpr_register()

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     initialise modules
      call chkpt_init
      call tstpr_init()

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------

      return
      end subroutine
!======================================================================
@endcode

@mod_param
@param_list Parameters provided by time stepper module (include file - \a TSTPRD):
|Varaible | Type | Runtime parameter | Description |
|---------|------|-------------------|-------------|
| tstpr_mode | integer | _tstpr:mode | simulation mode (1-direct, 2-adjoint, 3-direct+adjoint) |
| tstpr_step | integer | _tstpr:steps | frequency of calling stepper_vsolve (number of time steps) |
| tstpr_cmax | integer | _tstpr:maxcycles | maximal number of stepper cycles |
| tstpr_tol  | real    | _tstpr:tol  | convergence tolerance (e.g. PARPACK tolerance for Ritz values) |

@mod_param
@param_reqr Parameters required by time stepper module:
-# Nek5000 \a PARAM array and logical flags:
   + PARAM(12) - time step dt
   + IFTRAN, IFPERT, IFBASE, IFHEAT, NSTEPS, NPERT

@mod_param_example
@include Toolbox/tools/tstpr/example.par

*/
