#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup stat  2D and 3D statistics module
@ingroup tools

@brief Set of routines to collect 44 fields for statistics

@details 
This set of routines performs temporal, and in case of the 2D version, spanwise 
averaging of some 44 different fields, which include selected statistical moments
of velocity and pressure up to fourth order. 
A full list of fields is provided in the field_list.txt file located
in the same directory as this file.
Please note that there is no abuse of notation in the names of the quantities,
 e.g. <uu> actually means <uu> and not <u'u'>.

As metioned above, the module can operate in two regimes, 2D and 3D.
In the 3D case, the fields are only averaged in time, whereas in 2D
the they are also averaged spatially along a chosen homogeneous direction.
To select the mode of operation, the parameter stat_rdim defined in
the include file STATD should be set to either 1 for 2D statistics or 0
for 3D.
In the case of 2D statistics, the index of the homogeneous direction should
be selected as well. This is done by setting the idir variable in the
user_map2d_get subroutine, which should be copied into your .usr file.

The module will compute the statistics based on sampling the solution every
AVSTEP iterations. At each IOSTEP iteration, two files will be output with
prefix c2D and sts, respectively.

Each sts file will hold the data averaged over IOSTEP iterations.
IOSTEP is thus both the averaging window length and the frequency of
output. The sts files are in the same format as Nek5000 output files,
meaning that they can, for example, be opened with Paraview or other
tools. See also pstat2d and pstat3d in this Toolbox for ways of extracting
data from: averaging across sts files, computing additional fields,
extracting data at arbitrary points. 

The c2D files..




@mod_interface
@interface_list Interface provided:
-# @ref stat_register
-# @ref stat_init
-# @ref stat_end
-# @ref stat_avg

@par
@interface_reqr Interface required:
-# user_stat_trnsv
-# map2D_register
-# map2d_init
-# map2d_get
-# user_map2d_get

@mod_interface_example
@code{.f}
!======================================================================
      subroutine userchk
      include 'TSTEP'
      
      if (ISTEP.eq.0) then
!     start framework
         call frame_start
      endif

!     monitor simulation
      call frame_monitor

!     save/load files for full-restart
      call chkpt_main

!     collect statistics
      call stat_avg

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
 
      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! register modules
      call io_register
      call chkpt_register
      call stat_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! initialise modules
      call chkpt_init
      call stat_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! finlise modules
      call stat_end
      
      return
      end subroutine
!======================================================================
!> @brief Provide velocity, deriv. and vort. in required coordinates and normalise pressure
!! @param[out]   lvel             velocity
!! @param[out]   dudx,dvdx,dwdx   velocity derivatives
!! @param[out]   vort             vorticity
!! @param[inout] pres             pressure
      subroutine user_stat_trnsv(lvel,dudx,dvdx,dwdx,vort,pres)
      implicit none

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'               ! if3d
      include 'GEOM'

      ! argument list
      real lvel(LX1,LY1,LZ1,LELT,3) ! velocity array
      real dudx(LX1,LY1,LZ1,LELT,3) ! velocity derivatives; U
      real dvdx(LX1,LY1,LZ1,LELT,3) ! V
      real dwdx(LX1,LY1,LZ1,LELT,3) ! W
      real vort(LX1,LY1,LZ1,LELT,3) ! vorticity
      real pres(LX1,LY1,LZ1,LELT)   ! pressure

      ! local variables
      integer itmp              ! dummy variable
      integer il, jl            ! loop index
      integer ifll              ! field number for object definition
      real vrtmp(lx1*lz1)       ! work array for face
      real vrtmp2(2)            ! work array
      
      ! functions
      real vlsum
!-----------------------------------------------------------------------
      ! Velocity transformation; simple copy
      itmp = NX1*NY1*NZ1*NELV
      call copy(lvel(1,1,1,1,1),VX,itmp)
      call copy(lvel(1,1,1,1,2),VY,itmp)
      call copy(lvel(1,1,1,1,3),VZ,itmp)

      ! Derivative transformation
      ! No transformation
      call gradm1(dudx(1,1,1,1,1),dudx(1,1,1,1,2),dudx(1,1,1,1,3),
     $      lvel(1,1,1,1,1))
      call gradm1(dvdx(1,1,1,1,1),dvdx(1,1,1,1,2),dvdx(1,1,1,1,3),
     $      lvel(1,1,1,1,2))
      call gradm1(dwdx(1,1,1,1,1),dwdx(1,1,1,1,2),dwdx(1,1,1,1,3),
     $      lvel(1,1,1,1,3))

      ! get vorticity
      if (IF3D) then
         ! curlx
         call sub3(vort(1,1,1,1,1),dwdx(1,1,1,1,2),
     $        dvdx(1,1,1,1,3),itmp)
         ! curly
         call sub3(vort(1,1,1,1,2),dudx(1,1,1,1,3),
     $        dwdx(1,1,1,1,1),itmp)
      endif
      ! curlz
      call sub3(vort(1,1,1,1,3),dvdx(1,1,1,1,1),dudx(1,1,1,1,2),itmp)
      
      ! normalise pressure
      ! in this example I integrate pressure over top faces marked "W"
      ifll = 1     ! I'm interested in velocity bc
      ! relying on mesh structure given by genbox set face number
      jl = 3
      call rzero(vrtmp2,2)  ! zero work array
      itmp = LX1*LZ1
      do il=1,nelv   ! element loop
         if (cbc(jl,il,ifll).eq.'W  ') then
            vrtmp2(1) = vrtmp2(1) + vlsum(area(1,1,jl,il),itmp)
            call ftovec(vrtmp,pres,il,jl,lx1,ly1,lz1)
            call col2(vrtmp,area(1,1,jl,il),itmp)
            vrtmp2(2) = vrtmp2(2) + vlsum(vrtmp,itmp)
         endif
      enddo
      ! global communication
      call gop(vrtmp2,vrtmp,'+  ',2)
      ! missing error check vrtmp2(1) == 0
      vrtmp2(2) = -vrtmp2(2)/vrtmp2(1)
      ! remove mean pressure
      itmp = LX1*LY1*LZ1*NELV
      call cadd(pres,vrtmp2(2),itmp)

      return
      end subroutine
!======================================================================
@endcode

@mod_param
@param_list Parameters provided by sfd module (include file - \a STATD):
|Varaible | Type |Runtime parameter | Description|
|---------|------|------------------|------------|
| stat_avstep | integer | _stat:AvStep | frequency of averaging |
| stat_IOstep | integer | _stat:IOStep | frequency of saving data to the disc |


@mod_param_example
@code{.txt}
[_STAT]             # Runtime parameter section for statistics module
AVSTEP               = 10 # The frequency, in time-steps, at which the solution is sampled
IOSTEP               = 50 # The output frequency, in time-steps, which also defines the averaging window
@endcode

*/
#List of existing submodules
SUBMODULES

#List of conflicting submodules
EXCLUSIVE

#Default submodules
DEFAULT

#List of conflicting modules
CONFLICTS

#List of required modules
REQUIRED driver/runparam \
         io/io_tools \
         io/checkpoint/chkpt_mstep \

#List of object files
OBJECT tsrs.o \
       tsrs_IO.o

#List of include files
INCLUDE TSRSD
