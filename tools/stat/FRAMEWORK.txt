#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup stat  2D and 3D statistics module
@ingroup tools

@brief Set of routines to collect 44 fields for statistics

@details 
This set of routines performs temporal, and, in case of the 2D version, spanwise 
averaging of some 44 different fields, which include selected statistical moments
of velocity and pressure up to fourth order. 
A full list of fields is provided in the field_list.txt file located
in the same directory as this file.
Please note that there is no abuse of notation in the names of the quantities,
 e.g. \<uu\> actually means \<uu\> and not \<u'u'\>.

As metioned above, the module can operate in two regimes, 2D and 3D.
In the 3D case, the fields are only averaged in time, whereas in 2D
the they are also averaged spatially along a chosen homogeneous direction.
To select the mode of operation, the parameter `stat_rdim` defined in
the include file `STATD` should be set to either 1 for 2D statistics or 0
for 3D.
A template for this file is provided in this directory, you should copy it to
your case folder and rename it to `STATD`.

In the case of 2D statistics, the index of the homogeneous direction should
be selected as well. This is done by setting the `idir` variable in the
`user_map2d_get` subroutine, which should be copied into your `.usr` file.
The module will compute the statistics based on sampling the solution every
`AVSTEP` iterations. At each `IOSTEP` iteration, two files will be output with
prefix `c2D` and `sts`, respectively.
__Important__: the whole simulation must be run on the same number of ranks!

Each `sts` file will hold the data averaged over `IOSTEP` iterations.
`IOSTEP` is thus both the averaging window length and the frequency of
output. The `sts` files are in the same format as Nek5000 output files,
meaning that they can, for example, be opened with Paraview or other
tools. See also `pstat2d` in this Toolbox for ways of extracting
data from `sts` files: averaging across sts files, computing additional fields,
extracting data at arbitrary points. 

The `c2D` files store the element numbering in the `sts`-file mesh,
the centres of these elements, and also the level of refinement
(used for adaptive mesh refinement).
This information is used by the `pstat2d` tool.

In the case of 3D statistics, 11 files, `s01*` to `s11*` will be written
each `IOSTEP` iterations. Like with the 2D statistics, these will hold
quantities averaged over `IOSTEP` iterations.
Each file holds 4 fields, the distribtuion of quantities across the files
is provided in the `field_list.txt` file in this directory.
The files can also be opened in e.g. Paraview, but one should be aware
that the names of the fields are always `x_velocity`, `y_velocity`, 
`z_velocity` and `temerature`.
These names have nothing to do with the physical quantity stored.
Instead, one should consult `field_list.txt` and map the 4 quantities
listed there to the names above, in the order listed.
Post-processing of the produced fields can also be performed with the 
`pstat3d` tool.

@mod_interface
@interface_list Interface provided:
-# @ref stat_register
-# @ref stat_init
-# @ref stat_end
-# @ref stat_avg

@par
@interface_reqr Interface required:
-# user_stat_trnsv
-# map2D_register
-# map2d_init
-# map2d_get
-# user_map2d_get

@mod_interface_example
@code{.f}
!======================================================================
      subroutine userchk
      include 'TSTEP'
      
      if (ISTEP.eq.0) then
!     start framework
         call frame_start
      endif

!     monitor simulation
      call frame_monitor

!     collect statistics
      call stat_avg

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
 
      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! register modules
      call chkpt_register
      call stat_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! initialise modules
      call chkpt_init
      call stat_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
      ! finlise modules
      call stat_end
      
      return
      end subroutine
!======================================================================
!> @brief Provide velocity, deriv. and vort. in required coordinates and normalise pressure
!! @param[out]   lvel             velocity
!! @param[out]   dudx,dvdx,dwdx   velocity derivatives
!! @param[out]   vort             vorticity
!! @param[inout] pres             pressure
      subroutine user_stat_trnsv(lvel,dudx,dvdx,dwdx,vort,pres)
      implicit none

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'               ! if3d
      include 'GEOM'

      ! argument list
      real lvel(LX1,LY1,LZ1,LELT,3) ! velocity array
      real dudx(LX1,LY1,LZ1,LELT,3) ! velocity derivatives; U
      real dvdx(LX1,LY1,LZ1,LELT,3) ! V
      real dwdx(LX1,LY1,LZ1,LELT,3) ! W
      real vort(LX1,LY1,LZ1,LELT,3) ! vorticity
      real pres(LX1,LY1,LZ1,LELT)   ! pressure

      ! local variables
      integer itmp              ! dummy variable
      integer il, jl            ! loop index
      integer ifll              ! field number for object definition
      real vrtmp(lx1*lz1)       ! work array for face
      real vrtmp2(2)            ! work array
      
      ! functions
      real vlsum
!-----------------------------------------------------------------------
      ! Velocity transformation; simple copy
      itmp = NX1*NY1*NZ1*NELV
      call copy(lvel(1,1,1,1,1),VX,itmp)
      call copy(lvel(1,1,1,1,2),VY,itmp)
      call copy(lvel(1,1,1,1,3),VZ,itmp)

      ! Derivative transformation
      ! No transformation
      call gradm1(dudx(1,1,1,1,1),dudx(1,1,1,1,2),dudx(1,1,1,1,3),
     $      lvel(1,1,1,1,1))
      call gradm1(dvdx(1,1,1,1,1),dvdx(1,1,1,1,2),dvdx(1,1,1,1,3),
     $      lvel(1,1,1,1,2))
      call gradm1(dwdx(1,1,1,1,1),dwdx(1,1,1,1,2),dwdx(1,1,1,1,3),
     $      lvel(1,1,1,1,3))

      ! get vorticity
      if (IF3D) then
         ! curlx
         call sub3(vort(1,1,1,1,1),dwdx(1,1,1,1,2),
     $        dvdx(1,1,1,1,3),itmp)
         ! curly
         call sub3(vort(1,1,1,1,2),dudx(1,1,1,1,3),
     $        dwdx(1,1,1,1,1),itmp)
      endif
      ! curlz
      call sub3(vort(1,1,1,1,3),dvdx(1,1,1,1,1),dudx(1,1,1,1,2),itmp)
      
      ! normalise pressure
      ! in this example I integrate pressure over top faces marked "W"
      ifll = 1     ! I'm interested in velocity bc
      ! relying on mesh structure given by genbox set face number
      jl = 3
      call rzero(vrtmp2,2)  ! zero work array
      itmp = LX1*LZ1
      do il=1,nelv   ! element loop
         if (cbc(jl,il,ifll).eq.'W  ') then
            vrtmp2(1) = vrtmp2(1) + vlsum(area(1,1,jl,il),itmp)
            call ftovec(vrtmp,pres,il,jl,lx1,ly1,lz1)
            call col2(vrtmp,area(1,1,jl,il),itmp)
            vrtmp2(2) = vrtmp2(2) + vlsum(vrtmp,itmp)
         endif
      enddo
      ! global communication
      call gop(vrtmp2,vrtmp,'+  ',2)
      ! missing error check vrtmp2(1) == 0
      vrtmp2(2) = -vrtmp2(2)/vrtmp2(1)
      ! remove mean pressure
      itmp = LX1*LY1*LZ1*NELV
      call cadd(pres,vrtmp2(2),itmp)

      return
      end subroutine
!======================================================================
!> @brief Provide element coordinates and local numbers (user interface)
!! @param[out]  idir              mapping (uniform) direction
!! @param[out]  ctrs              2D element centres
!! @param[out]  cell              local element numberring
!! @param[in]   lctrs1,lctrs2     array sizes
!! @param[out]  nelsort           number of local 3D elements to sort
!! @param[out]  map_xm1, map_ym1  2D coordinates of mapped elements
!! @param[out]  ierr              error flag
      subroutine user_map2d_get(idir,ctrs,cell,lctrs1,lctrs2,nelsort,
     $     map_xm1,map_ym1,ierr)
      implicit none

      include 'SIZE'
      include 'INPUT'           ! [XYZ]C
      include 'GEOM'            ! [XYZ]M1

!     argument list
      integer idir
      integer lctrs1,lctrs2
      real ctrs(lctrs1,lctrs2)  ! 2D element centres  and diagonals 
      integer cell(lctrs2)      ! local element numberring
      integer nelsort           ! number of local 3D elements to sort
      real map_xm1(lx1,lz1,lelt), map_ym1(lx1,lz1,lelt)
      integer ierr              ! error flag

!     local variables
      integer ntot              ! tmp array size for copying
      integer el ,il ,jl        ! loop indexes
      integer nvert             ! vertex number
      real rnvert               ! 1/nvert
      real xmid,ymid            ! 2D element centre
      real xmin,xmax,ymin,ymax  ! to get approximate element diagonal
      integer ifc               ! face number

!     dummy arrays
      real xcoord(8,LELT), ycoord(8,LELT) ! tmp vertex coordinates

#ifdef DEBUG
!     for testing
      character*3 str1, str2
      integer iunit, ierrl
      ! call number
      integer icalldl
      save icalldl
      data icalldl /0/
#endif

!-----------------------------------------------------------------------
!     initial error flag
      ierr = 0
!     set important parameters
!     uniform direction; should be taken as input parameter
!     x-> 1, y-> 2, z-> 3
      idir = 3
      
!     get element midpoints
!     vertex number
      nvert = 2**NDIM
      rnvert= 1.0/real(nvert)

!     eliminate uniform direction
      ntot = 8*NELV
      if (idir.EQ.1) then  ! uniform X
         call copy(xcoord,YC,ntot) ! copy y
         call copy(ycoord,ZC,ntot) ! copy z
      elseif (idir.EQ.2) then  ! uniform Y
         call copy(xcoord,XC,ntot) ! copy x
         call copy(ycoord,ZC,ntot) ! copy z
      elseif (idir.EQ.3) then  ! uniform Z
         call copy(xcoord,XC,ntot) ! copy x
         call copy(ycoord,YC,ntot) ! copy y
      endif

!     set initial number of elements to sort
      nelsort = 0
      call izero(cell,NELT)

!     for every element
      do el=1,NELV
!     element centre
         xmid = xcoord(1,el)
         ymid = ycoord(1,el)
!     element diagonal
         xmin = xmid
         xmax = xmid
         ymin = ymid
         ymax = ymid
         do il=2,nvert
            xmid=xmid+xcoord(il,el)
            ymid=ymid+ycoord(il,el)
            xmin = min(xmin,xcoord(il,el))
            xmax = max(xmax,xcoord(il,el))
            ymin = min(ymin,ycoord(il,el))
            ymax = max(ymax,ycoord(il,el))
         enddo
         xmid = xmid*rnvert
         ymid = ymid*rnvert

!     count elements to sort
            nelsort = nelsort + 1
!     2D position
!     in general this coud involve some curvilinear transform
            ctrs(1,nelsort)=xmid
            ctrs(2,nelsort)=ymid
!     reference distance
            ctrs(3,nelsort)=sqrt((xmax-xmin)**2 + (ymax-ymin)**2)
            if (ctrs(3,nelsort).eq.0.0) then
               ierr = 1
               return
            endif
!     element index
            cell(nelsort) = el
      enddo

!     provide 2D mesh
!     in general this coud involve some curvilinear transform
      if (idir.EQ.1) then  ! uniform X
         ifc = 4
         do el=1,NELV
            call ftovec(map_xm1(1,1,el),ym1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),zm1,el,ifc,nx1,ny1,nz1)
         enddo
      elseif (idir.eq.2) then  ! uniform y
         ifc = 1
         do el=1,nelv
            call ftovec(map_xm1(1,1,el),xm1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),zm1,el,ifc,nx1,ny1,nz1)
         enddo
      elseif (idir.eq.3) then  ! uniform z
         ifc = 5
         do el=1,nelv
            call ftovec(map_xm1(1,1,el),xm1,el,ifc,nx1,ny1,nz1)
            call ftovec(map_ym1(1,1,el),ym1,el,ifc,nx1,ny1,nz1)
         enddo
      endif

#ifdef DEBUG
!     testing
      ! to output refinement
      icalldl = icalldl+1
      call io_file_freeid(iunit, ierrl)
      write(str1,'(i3.3)') NID
      write(str2,'(i3.3)') icalldl
      open(unit=iunit,file='map2d_usr.txt'//str1//'i'//str2)
      
      write(iunit,*) idir, NELV, nelsort
      write(iunit,*) 'Centre coordinates and cells'
      do el=1,nelsort
         write(iunit,*) el, ctrs(:,el), cell(el)
      enddo
      write(iunit,*) 'GLL coordinates'
      do el=1,nelsort
         write(iunit,*) 'Element ', el
         write(iunit,*) 'XM1'
         do il=1,nz1
            write(iunit,*) (map_xm1(jl,il,el),jl=1,nx1)
         enddo
         write(iunit,*) 'YM1'
         do il=1,nz1
            write(iunit,*) (map_ym1(jl,il,el),jl=1,nx1)
         enddo
      enddo
      close(iunit)
#endif

      return
      end subroutine
!=======================================================================
@endcode

@mod_param
@param_list Parameters provided by sfd module (include file - \a STATD):
|Varaible | Type |Runtime parameter | Description|
|---------|------|------------------|------------|
| stat_avstep | integer | _stat:AvStep | frequency of averaging |
| stat_IOstep | integer | _stat:IOStep | frequency of saving data to the disc |


@mod_param_example
@code{.txt}
[_STAT]             # Runtime parameter section for statistics module
AVSTEP               = 10 # The frequency, in time-steps, at which the solution is sampled
IOSTEP               = 50 # The output frequency, in time-steps, which also defines the averaging window
@endcode

*/
